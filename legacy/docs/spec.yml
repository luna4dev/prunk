openapi: 3.0.0
info:
  title: Prunk Services API
  description: Serverless API for Prunk Services
  version: 1.0.0
  contact:
    name: Prunk Services Team
    email: support@prunk.com
  license:
    name: ISC
    url: https://opensource.org/licenses/ISC

servers:
  - url: https://prunk.luna4.me/api
    description: Production server
  - url: http://localhost:3000
    description: Local development server

paths:
  /auth/email:
    post:
      summary: Request email authentication
      description: Send an authentication email to the provided email address
      operationId: requestEmailAuth
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The email address to send authentication to
                  example: 'user@example.com'
              required:
                - email
      responses:
        '201':
          description: Email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'success'
        '400':
          description: Bad request - invalid email format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests - email sent recently
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/email/verify:
    get:
      summary: Verify email authentication token
      description: Verify the authentication token sent via email and return a JWT token
      operationId: verifyEmailAuth
      tags:
        - Auth
      parameters:
        - name: email
          in: query
          description: The email address that was used for authentication
          required: true
          schema:
            type: string
            format: email
        - name: token
          in: query
          description: The authentication token sent via email
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authenticated user
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
        '400':
          description: Bad request - malformed email verification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /project:
    get:
      summary: Get user's projects
      description: Retrieve all projects that the authenticated user has access to
      operationId: getProjects
      tags:
        - Projects
      security:
        - BearerAuth: []
      parameters:
        - name: page_size
          in: query
          description: Number of projects to return (1-100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: last_evaluated_key
          in: query
          description: Pagination token for getting the next page of results
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  lastEvaluatedKey:
                    type: string
                    description: Pagination token for the next page
                required:
                  - records
                  - lastEvaluatedKey
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create a new project
      description: Create a new project and assign the authenticated user as the owner
      operationId: createProject
      tags:
        - Projects
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  description: The name of the project
                  example: 'My New Project'
                description:
                  type: string
                  description: The description of the project
                  example: 'A description of my new project'
                status:
                  type: string
                  enum: ['ACTIVE', 'SUSPENDED']
                  default: 'ACTIVE'
                  description: The status of the project
                preferences:
                  type: object
                  description: The preferences of the project
                  example: {}
              required:
                - name
                - description
      responses:
        '200':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Bad request - invalid project data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /project/{project_id}:
    get:
      summary: Get project details
      description: Retrieve details of a specific project that the authenticated user has access to
      operationId: getProject
      tags:
        - Projects
      security:
        - BearerAuth: []
      parameters:
        - name: project_id
          in: path
          description: The ID of the project to get
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Project not found or access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: 'Internal server error'
        statusCode:
          type: integer
          description: HTTP status code
          example: 500
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
          example: '2024-01-15T10:30:00Z'
      required:
        - error
        - statusCode
        - timestamp

    Project:
      type: object
      properties:
        projectId:
          type: string
          description: The unique identifier of the project
          example: 'proj_1234567890'
        name:
          type: string
          description: The name of the project
          example: 'My Project'
        description:
          type: string
          description: The description of the project
          example: 'A description of my project'
        status:
          type: string
          enum: ['ACTIVE', 'SUSPENDED']
          description: The status of the project
          example: 'ACTIVE'
        preferences:
          type: object
          description: The preferences of the project
          example: {}
        createdAt:
          type: integer
          description: The timestamp (milliseconds) of when the project was created
          example: 1705312800000
        updatedAt:
          type: integer
          description: The timestamp (milliseconds) of when the project was last updated
          example: 1705312800000
      required:
        - projectId
        - name
        - description
        - status
        - preferences
        - createdAt
        - updatedAt

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

tags:
  - name: Health
    description: Health check and status endpoints
  - name: Auth
    description: Authentication and authorization endpoints
  - name: Users
    description: User management endpoints
  - name: Projects
    description: Project management endpoints
